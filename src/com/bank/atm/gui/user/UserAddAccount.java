package com.bank.atm.gui.user;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Interface for users to add new account
 *
 * @author Sandra Zhen
 */
public class UserAddAccount extends JFrame {
    private final int frameWidth = 500;
    private final int frameHeight = 500;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        userAddAccountPanel = new JPanel();
        userAddAccountPanel.setLayout(new GridBagLayout());
        final JLabel label1 = new JLabel();
        label1.setText("Create New Account");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        userAddAccountPanel.add(label1, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        userAddAccountPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(20, 0, 0, 0);
        userAddAccountPanel.add(spacer2, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Type of Account:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        userAddAccountPanel.add(label2, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        userAddAccountPanel.add(accountTypeComboBox, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Currency Type:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        userAddAccountPanel.add(label3, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        userAddAccountPanel.add(currencyTypeComboBox, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Account Options:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        userAddAccountPanel.add(label4, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        userAddAccountPanel.add(accountOptionsComboBox, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Account Name:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        userAddAccountPanel.add(label5, gbc);
        accountNameTextArea = new JTextArea();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        userAddAccountPanel.add(accountNameTextArea, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(20, 0, 0, 0);
        userAddAccountPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(20, 0, 0, 0);
        userAddAccountPanel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(20, 0, 0, 0);
        userAddAccountPanel.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.VERTICAL;
        userAddAccountPanel.add(spacer6, gbc);
        createAccountButton = new JButton();
        createAccountButton.setText("Create Account");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        userAddAccountPanel.add(createAccountButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return userAddAccountPanel;
    }

    //list of available account types and their options. Add any new account types here.
    private enum AccountType {
        CHECKINGS("Standard"),
        SAVINGS("Low-End", "High-End"),
        SECURITY("Standard");

        private String[] options;

        AccountType(String... options) {
            this.options = options;
        }

        public String[] getOptions() {
            return options;
        }
    }

    private enum CurrencyType {
        USD, JPY, EURO
    }

    private JPanel userAddAccountPanel;
    private JComboBox<AccountType> accountTypeComboBox;
    private JComboBox<CurrencyType> currencyTypeComboBox;
    private JComboBox<String> accountOptionsComboBox;
    private JTextArea accountNameTextArea;
    private JButton createAccountButton;

    /**
     * @param userID - ID of user to add account for
     */
    public UserAddAccount(String userID) {
        $$$setupUI$$$();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setContentPane(userAddAccountPanel);//sets content to our menu panel
        this.setPreferredSize(new Dimension(frameWidth, frameHeight));//set width and height of our frame
        this.pack();

        createAccountButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //todo when createAccount button is clicked, create account.
//                createAccount();
                System.out.println("Account is being created");
            }
        });
        accountTypeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                JComboBox<AccountType> comboBox = (JComboBox<AccountType>) event.getSource();
                //change the available account options based on selected account type
                String[] accountOptions = ((AccountType) accountTypeComboBox.getSelectedItem()).getOptions();
                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(accountOptions);
                accountOptionsComboBox.setModel(model);
            }
        });
    }


    private void createUIComponents() {
        accountTypeComboBox = new JComboBox<AccountType>(AccountType.values());
        String[] accountOptions = ((AccountType) accountTypeComboBox.getSelectedItem()).getOptions();
        accountOptionsComboBox = new JComboBox<>(accountOptions);

        currencyTypeComboBox = new JComboBox<>(CurrencyType.values());


    }
//    //TODO implement create account
//    private Account createAccount(){
//
//        switch (accountTypeComboBox.getPrototypeDisplayValue()){
//            case SAVINGS:
//                //iterate through selected options for savings account and construct account
//                break;
//            case SECURITY:
//                break;
//            case CHECKINGS:
//                break;
//        }
//        switch (currencyTypeComboBox.getPrototypeDisplayValue()){
//            case USD:
//                break;
//            case JPY:
//                break;
//            case EURO:
//                break;
//        }
//        return null;
//    }

}
