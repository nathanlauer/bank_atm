package com.bank.atm.gui.banker;

import com.bank.atm.backend.accounts.Account;
import com.bank.atm.backend.accounts.loan_accounts.LoanAccount;
import com.bank.atm.backend.collections.AccountsCollectionManager;
import com.bank.atm.util.ID;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import static com.bank.atm.backend.accounts.loan_accounts.LoanState.REQUESTED;

/**
 * @author Navoneel Ghosh
 * GUI for banker. Enables the banker to see the details of Loans and Approve/Reject loans in "Requested" state.
 */
public class ViewLoans extends JFrame {
    private JTable viewLoansTable;
    private JPanel viewLoansPanel;
    private JScrollPane viewLoansScrollPane;
    private JButton backButton;
    private JPanel backPanel;
    private JButton rejectLoanButton;
    private JButton approveLoanButton;
    private LoanCustomTableModel loanCustomTableModel;

    public ViewLoans(String title) {
        super(title);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setContentPane(viewLoansPanel);
        this.setPreferredSize(new Dimension(800, 500));//set width and height of our frame
        this.pack();
        this.setLocationRelativeTo(null);
        this.createLoansTable();
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                JFrame frame = new BankerMenu("Banker Menu");
                frame.setVisible(true);
            }
        });
        approveLoanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int rows[] = viewLoansTable.getSelectedRows();
                for (int i = 0; i < rows.length; i++) {
                    LoanAccount loanAccount = (LoanAccount) (loanCustomTableModel.getAccountAt(rows[i]));
                    if (loanAccount.getLoanState().equals(REQUESTED)) {
                        AccountsCollectionManager.getInstance().approveLoan(loanAccount);
                    }
                }
                createLoansTable();
            }
        });
        rejectLoanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int rows[] = viewLoansTable.getSelectedRows();
                for (int i = 0; i < rows.length; i++) {
                    LoanAccount loanAccount = (LoanAccount) (loanCustomTableModel.getAccountAt(rows[i]));
                    if (loanAccount.getLoanState().equals(REQUESTED)) {
                        AccountsCollectionManager.getInstance().rejectLoan(loanAccount);
                    }
                }
                createLoansTable();
            }
        });
    }

    private void createLoansTable() {
        String[] columnNames = {"User ID", "First Name",
                "Last Name", "Loan Account ID", "Loan Amount", "Loan Status"};
        List<Account> accountList = AccountsCollectionManager.getInstance().allLoans();
        this.loanCustomTableModel = new LoanCustomTableModel(accountList, columnNames);
        viewLoansTable.setModel(this.loanCustomTableModel);
        viewLoansTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        viewLoansScrollPane.getViewport().add(viewLoansTable);
        viewLoansTable.setFillsViewportHeight(true);
        viewLoansScrollPane.setVisible(true);
        viewLoansTable.setVisible(true);
        viewLoansTable.setRowHeight(30);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        viewLoansPanel = new JPanel();
        viewLoansPanel.setLayout(new GridBagLayout());
        viewLoansScrollPane = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        viewLoansPanel.add(viewLoansScrollPane, gbc);
        viewLoansTable = new JTable();
        viewLoansScrollPane.setViewportView(viewLoansTable);
        backPanel = new JPanel();
        backPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        viewLoansPanel.add(backPanel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        backPanel.add(spacer1, gbc);
        rejectLoanButton = new JButton();
        rejectLoanButton.setText("Reject Loan");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        backPanel.add(rejectLoanButton, gbc);
        approveLoanButton = new JButton();
        approveLoanButton.setText("Approve Loan");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        backPanel.add(approveLoanButton, gbc);
        backButton = new JButton();
        backButton.setText("Back");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        backPanel.add(backButton, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(0, 20, 0, 20);
        backPanel.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(0, 20, 0, 20);
        backPanel.add(spacer3, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return viewLoansPanel;
    }
}